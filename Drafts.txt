///////////////////////////////////////////////////////////////////////////////////
//
//	Drafts (@anthonyleestark/drafts)
//
///////////////////////////////////////////////////////////////////////////////////

// Enable/disable auto-start with Windows (with Admin priviledges)
EnableAutoStart: Cmd=(schtasks /create /sc onlogon /tn /*{Your-Application-Name}*/ /rl highest /tr "/*{Your-Exe-Path}.exe*/" /f)
DisableAutoStart: Cmd=(schtasks /delete /tn /*{Your-Application-Name}*/ /f)

class SMultilineOutputView

///////////////////////////////////////////////////////////////////////////////////

class SCtrlInfoWrap
{
protected:
	LPVOID	m_ptrCustomData;
	PSIZE_T	m_pszDataSize;
	
public:
	template<typename DATA_TYPE>
	BOOL GetData(DATA_TYPE* lpOutput, SIZE_T& szDataSize) const;
	template<typename DATA_TYPE>
	void SetData(const DATA_TYPE* lpInput, const SIZE_T& szSize);
};

///////////////////////////////////////////////////////////////////////////////////

#include <iostream>
#include <string>
#include <variant>
#include <map>
#include <optional> // For using std::optional

// Define the value type using std::variant
using ValueType = std::variant<int, float, std::string>;

// Function to get the value at a specific key
std::optional<ValueType> getValueAtKey(const std::map<std::string, ValueType>& myMap, const std::string& key) {
    auto it = myMap.find(key); // Look for the key in the map
    if (it != myMap.end()) {
        return it->second; // Return the value if key is found
    }
    return std::nullopt; // Return std::nullopt if key is not found
}

int main() {
    // Create a map and add some key-value pairs
    std::map<std::string, ValueType> myMap = {
        {"key1", 42},
        {"key2", 3.14f},
        {"key3", "Hello, World"}
    };

    // Get and display the value for a specific key
    std::string searchKey = "key2";
    auto result = getValueAtKey(myMap, searchKey);

    if (result.has_value()) {
        std::cout << searchKey << ": ";
        std::visit([](auto&& v) { std::cout << v << '\n'; }, result.value());
    } else {
        std::cout << searchKey << " not found in the map.\n";
    }

    return 0;
}

///////////////////////////////////////////////////////////////////////////////////

#include <afx.h>
#include <iostream>

// Custom class to hold multi-type values
class Value {
public:
    enum ValueType { Integer, Float, String } type;
    union {
        int intValue;
        float floatValue;
    };
    CString stringValue;

    Value(int v) : type(Integer), intValue(v) {}
    Value(float v) : type(Float), floatValue(v) {}
    Value(CString v) : type(String), stringValue(v) {}
};

// Function to get a value from CMap
CString GetValueAsString(const CMap<CString, LPCTSTR, Value*, Value*>& map, CString key) {
    Value* value = nullptr;
    if (map.Lookup(key, value)) {
        switch (value->type) {
            case Value::Integer:
                return CString(std::to_string(value->intValue).c_str());
            case Value::Float:
                return CString(std::to_string(value->floatValue).c_str());
            case Value::String:
                return value->stringValue;
        }
    }
    return _T("Key not found");
}

int main() {
    // Create CMap and insert key-value pairs
    CMap<CString, LPCTSTR, Value*, Value*> myMap;
    myMap.SetAt(_T("key1"), new Value(42));
    myMap.SetAt(_T("key2"), new Value(3.14f));
    myMap.SetAt(_T("key3"), new Value(_T("Hello, World")));

    // Get and display a value
    CString key = _T("key2");
    std::wcout << L"Value at " << key.GetString() << L": " << GetValueAsString(myMap, key).GetString() << std::endl;

    return 0;
}

///////////////////////////////////////////////////////////////////////////////////

can i build something like this:

File A.h:
class A;	// Declaration of class A
// Get/set functions:
int GetX(void) { return GetInstance()->GetX(); };
int GetY(void) { return GetInstance()->GetY(); };

File A.cpp:
#include "A.h"

class A
{
private:
	int X;
	int Y;
	
private:
	A* instance;

public:
	static A* GetInstance();

	int GetX() const { return X; };
	int GetY() const { return Y; };
};

the function GetGlobalX/Y are the only way to access the data of A